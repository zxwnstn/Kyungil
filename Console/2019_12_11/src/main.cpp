#include <stdio.h>
#include <iostream>
using namespace std;

int main() {
	// api 공부시 무조건 알아야 하는 개념
	// 좌표, 메세지 기반 프로그래밍

	//컴퓨터 = 전자계산기
	//기본적으로 데이터를 연산하는 도구이다.
	//데이터의 연산은 컴퓨터가 해석할수있는 명령어의 모음을 통해 수행된다.

	//데이터 연산기능을 수행하기 위한 기본 3요소
	//디스크 : 데이터를 기록 또는 저장하는 장치
	//메모리 : 기록된 데이터를 실시간 연산이 가능하도록 일시적으로 데이터를 저장하는 장치.
	//cpu : 데이터의 연산을 수행하는 장치

	//about 메모리
	//메모리의 최소단위는 바이트
	//데이터는 기본적으로 2의 지수승 단위로 저장된다.
	//메모리는 한계가 존재하기 때문에 항상 확보와 해제라는 단계를 거친다.
	//불필요한 데이터가 해제 되지 않으면 메모리 누수가 발생할수 있다.

	//about 디스크
	//원반의 회전과 헤드의 이동으로 데이터를 읽을수 있다. 데이터를 
	//물리적으로 접근하기 때문에 메모리보다 데이터를 읽는 시간이 훨씬 많이 걸린다.

	//프로그래밍 : cpu가 수행할 연산에 대한 명령으 ㄹ기록해 놓은것, 기본적으로 자료형과 연산자 제어구조로 구성한다.

	//about : 게임엔진
	//게임 개발에 다양한 기능들을 모아 놓은 소프트웨어
	//주요기능 그래픽 렌더링, 물리 연산, 사운드, UI, 리로스 관리, 서버네트워크, AI, 시스템프로파일링

	//about : 메모리
	/*
	프로그램이 실행되기 위해서는 먼저 프로그램이 메모리에 로드되어야 한다.
	프로그램에서 사용되는 변수들을 저장할 메모리도 필요하다.
	컴퓨터의 운영체제는 프로그램의 실행을 위해 다양한 메모리 공간을 제공한다.

	코드 영역 : 실행할 프로그램의 코드가 저장되는 영역. cpu는 코드영역에 저장된 명령어를 하나씩 가져와서 처리하게 된다.
	데이터 영역 : 전역 변수와 정적변수가 저장된다. 프로그램의 시작과 함께 할당되며 종료되면 소멸된다.
	힙 영역 : 사용자가 직접 관리 할수 있는 그리고 해야만 하는 영역이다. 
	사용자에 의해 메모리 공간이 동적으로 할당되고 해제 된다. 메모리의 낮은 주소에서 높은 주소의 방향으로 할당된다.
	스택영역 : 함수의 호출과 관계되는 지역변수와 매개변수가 저장되는 영역이다. 함수의 호출과 함께 할당되며 함수의 반환과 함께 소멸한다.
	함수의 호출 정보를 스택 프레임이라고 한다. 높은주소부터 낮은 주소로 할당된다.

	*/


	//빙고 게임
	//srand(time(NULL));
	//int number[25];
	//int dest, sour, temp;
	//int inputN;
	//int bingoCount = 0;

	//for (int i = 0; i < 25; ++i)
	//	number[i] = i + 1;

	//for (int i = 0; i < 500; ++i) {
	//	dest = rand() % 25;
	//	sour = rand() % 25;


	//	temp = number[dest];
	//	number[dest] = number[sour];
	//	number[sour] = temp;
	//}

	//system("pause");
	//while (1) {
	//	system("cls");
	//	cout << "재미없는 빙고 게임~" << endl;
	//	cout << "빙고 카운트 : " << bingoCount << endl;

	//	//draw board
	//	for (int i = 0; i < 25; ++i) {
	//		if (number[i] == 35)
	//			cout << (char)number[i] << '\t';
	//		else
	//			cout << number[i] << '\t';
	//		if ((i + 1) % 5 == 0) 
	//			cout << '\n';
	//	}

	//	//숫자 입력
	//	cout << "원하는 숫자를 입력하시오" << endl;
	//	cin >> inputN;
	//	for (int i = 0; i < 25; ++i) 
	//		if (number[i] == inputN)
	//			number[i] = 35;
	//	
	//	//빙고 판별
	//	bingoCount = 0;
	//	for (int i = 0; i < 5; ++i) {
	//		//가로
	//		if (number[i * 5] == 35 && number[i * 5 + 1] == 35 && number[i * 5 + 2] == 35
	//			&& number[i * 5 + 3] == 35 && number[i * 5 + 4] == 35) {
	//			bingoCount++;
	//		}
	//		//세로
	//		if (number[i] == 35 && number[i + 5 * 1] == 35 && number[i + 5 * 2] == 35
	//			&& number[i + 5 * 3] == 35 && number[i + 5 * 4] == 35)
	//			bingoCount++;
	//	}
	//	//왼쪽에서 오른쪽 아래 대각선
	//	if (number[0] == 35 && number[6] == 35 && number[12] == 35 && number[18] == 35 && number[24] == 35)
	//		bingoCount++;
	//	//오른쪽에서 왼쪽 아래 대각선
	//	if (number[4] == 35 && number[8] == 35 && number[12] == 35 && number[16] == 35 && number[20] == 35)
	//		bingoCount++;

	//	//승리조건 판별
	//	if (bingoCount >= 3) {
	//		cout << "집으로 돌아가자~" << endl;
	//		break;
	//	}
	//}

	//TODO : 휴식
	//
}
